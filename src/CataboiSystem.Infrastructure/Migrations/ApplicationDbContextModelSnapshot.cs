// <auto-generated />
using System;
using CataboiSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CataboiSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext")
                        .HasColumnName("cargo");

                    b.Property<string>("Cpf")
                        .HasColumnType("longtext")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext")
                        .HasColumnName("senha");

                    b.HasKey("AdminId");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Animal", b =>
                {
                    b.Property<int>("Idanimal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idanimal");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<string>("Especie")
                        .HasColumnType("longtext")
                        .HasColumnName("especie");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("longblob")
                        .HasColumnName("foto");

                    b.Property<string>("NumeroBrincos")
                        .HasColumnType("longtext")
                        .HasColumnName("numero_brincos");

                    b.Property<string>("Pelagem")
                        .HasColumnType("longtext")
                        .HasColumnName("pelagem");

                    b.Property<float?>("Peso")
                        .HasColumnType("float")
                        .HasColumnName("peso");

                    b.Property<string>("Prenhez")
                        .HasColumnType("longtext")
                        .HasColumnName("prenhez");

                    b.Property<string>("Propriedade")
                        .HasColumnType("longtext")
                        .HasColumnName("propriedade_id");

                    b.Property<string>("Raca")
                        .HasColumnType("longtext")
                        .HasColumnName("raca");

                    b.Property<int>("RebanhoId")
                        .HasColumnType("int")
                        .HasColumnName("rebanho_id");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext")
                        .HasColumnName("sexo");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Idanimal");

                    b.ToTable("animais");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cidade");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cpf_cnpj");

                    b.Property<DateTime?>("DtaInclu")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dta_inclu");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<string>("InscricaoEst")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("inscricao_est");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome_cliente");

                    b.Property<int?>("NumUsuarios")
                        .HasColumnType("int")
                        .HasColumnName("num_usuarios");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("telefone");

                    b.HasKey("ClienteId");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Evento", b =>
                {
                    b.Property<int>("IdevenR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idevenR");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<DateOnly>("DataEvento")
                        .HasColumnType("date")
                        .HasColumnName("data_evento");

                    b.Property<string>("Descri")
                        .HasColumnType("longtext")
                        .HasColumnName("descri");

                    b.Property<int>("EventoGrupo")
                        .HasColumnType("int")
                        .HasColumnName("evento_grupo");

                    b.Property<string>("Local")
                        .HasColumnType("longtext")
                        .HasColumnName("local");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("Obser")
                        .HasColumnType("longtext")
                        .HasColumnName("obser");

                    b.Property<int>("RebanhoId")
                        .HasColumnType("int")
                        .HasColumnName("rebanho_id");

                    b.HasKey("IdevenR");

                    b.HasIndex("RebanhoId");

                    b.ToTable("eventos");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Propriedade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Localidade")
                        .HasColumnType("longtext")
                        .HasColumnName("localidade");

                    b.Property<string>("NomePropriedade")
                        .HasColumnType("longtext")
                        .HasColumnName("nomePropriedade");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("propriedade");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Rebanho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("DescriRebanho")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descriRebanho");

                    b.Property<string>("NomeRebanho")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nomeRebanho");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("rebanho");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Idusu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idusu");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("Idusu");

                    b.HasIndex("ClienteId");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Evento", b =>
                {
                    b.HasOne("CataboiSystem.Domain.Entities.Rebanho", null)
                        .WithMany("Eventos")
                        .HasForeignKey("RebanhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Propriedade", b =>
                {
                    b.HasOne("CataboiSystem.Domain.Entities.Cliente", null)
                        .WithMany("Propriedades")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Rebanho", b =>
                {
                    b.HasOne("CataboiSystem.Domain.Entities.Cliente", null)
                        .WithMany("Rebanhos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("CataboiSystem.Domain.Entities.Cliente", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Propriedades");

                    b.Navigation("Rebanhos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("CataboiSystem.Domain.Entities.Rebanho", b =>
                {
                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
